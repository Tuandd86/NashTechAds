# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  buildConfiguration: 'Release'

jobs:
- job: AspNetCore
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      packageType: 'sdk'
      version: '3.0.100-preview6-012264'

  - script: dotnet build --configuration $(buildConfiguration)
    displayName: 'dotnet build $(buildConfiguration)'

    # Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: test
      arguments: '--configuration $(BuildConfiguration) --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude=[xunit.*]*%2c[System.*]*'
      projects: 'test/**/*.csproj'
      nobuild: true

  # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
  # First install the tool on the machine, then run it
  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      reportgenerator "-reports:$(Build.SourcesDirectory)/test/**/coverage.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)/CodeCoverage" "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
    displayName: Create Code coverage report

  # Publish the code coverage result (summary and web site)
  # The summary allows to view the coverage percentage in the summary tab
  # The web site allows to view which lines are covered directly in Azure Pipeline
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      
  - script: |
      dotnet tool install -g dotnet-ef --version 3.0.0-preview6.19304.10
      dotnet ef migrations script -i -o $(Build.ArtifactStagingDirectory)/migrate.sql --project src/NashTechAdsAPI/NashTechAdsAPI.csproj
    displayName: 'Generate EF Migration script'

  - task: DotNetCoreCLI@2
    displayName: Publish APIs
    inputs:
      command: publish
      projects: src/NashTechAdsAPI/NashTechAdsAPI.csproj
      publishWebProjects: false
      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) --runtime win-x86'
      zipAfterPublish: true

  - task: PublishBuildArtifacts@1
    displayName: 'PublishBuildArtifacts - API'
    inputs:
      ArtifactName: 'api'
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/NashTechAdsAPI.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'PublishBuildArtifacts - EF Migration Script'
    inputs:
      ArtifactName: 'migrate'
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/migrate.sql'

- job: Angular
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: Npm@1
    displayName: 'npm install'
    inputs:
      command: install
      workingDir: ntads-client

  - task: Npm@1
    displayName: 'Build Angular'
    inputs:
      command: custom
      customCommand: run build -- --prod
      workingDir: ntads-client

  - task: PublishBuildArtifacts@1
    displayName: 'PublishBuildArtifacts - Angular'
    inputs:
      ArtifactName: 'angular'
      PathtoPublish: 'ntads-client/dist'